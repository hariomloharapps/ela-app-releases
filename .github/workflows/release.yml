name: Sync Release to Backend

on:
  release:
    types: [published]

jobs:
  sync_to_backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Get Release Data
        id: get_release
        run: |
          echo "Fetching release data from GitHub..."
          
          RELEASE_DATA=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }})
          
          echo "$RELEASE_DATA" > release_data.json
          
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION_NAME=$(echo "$TAG_NAME" | sed 's/^v//')
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "release_id=${{ github.event.release.id }}" >> $GITHUB_OUTPUT

      - name: Extract Version Code
        id: extract_code
        run: |
          RELEASE_BODY="${{ github.event.release.body }}"
          
          VERSION_CODE=$(echo "$RELEASE_BODY" | grep -o 'Build [0-9]\+' | grep -o '[0-9]\+' || echo "1")
          
          if [ "$VERSION_CODE" = "1" ]; then
            VERSION_CODE=$(date +%s)
          fi
          
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Send to Backend Server
        run: |
          echo "Preparing data for backend..."
          
          RELEASE_DATA=$(cat release_data.json)
          
          BACKEND_PAYLOAD=$(echo "$RELEASE_DATA" | jq --arg version_name "${{ steps.get_release.outputs.version_name }}" \
            --arg version_code "${{ steps.extract_code.outputs.version_code }}" '{
            app_name: "ELA",
            package_name: "com.ela.app",
            version_name: $version_name,
            version_code: ($version_code | tonumber),
            release_tag: .tag_name,
            release_name: .name,
            release_notes: .body,
            release_url: .html_url,
            github_release_id: .id,
            created_at: .created_at,
            published_at: .published_at,
            apk_files: [.assets[] | select(.name | endswith(".apk")) | {
              name: .name,
              download_url: .browser_download_url,
              size: .size,
              download_count: .download_count,
              content_type: .content_type,
              github_asset_id: .id
            }]
          }')
          
          echo "Sending to backend server..."
          echo "Data preview:"
          echo "$BACKEND_PAYLOAD" | jq '.'
          
          curl -X POST "https://mfqdh2s3-8000.inc1.devtunnels.ms/api/releases/" \
            -H "Content-Type: application/json" \
            -H "User-Agent: ELA-Release-Sync" \
            -d "$BACKEND_PAYLOAD" \
            --max-time 30 \
            --retry 2 \
            --fail-with-body || {
              echo "Failed to sync to backend"
              exit 1
            }
          
          echo "Successfully synced release to backend!"

      - name: Sync Summary
        run: |
          echo "Release Sync Completed!"
          echo "Version: ${{ steps.get_release.outputs.version_name }}"
          echo "GitHub Release: ${{ github.event.release.html_url }}"
          echo "Backend updated with release data"
